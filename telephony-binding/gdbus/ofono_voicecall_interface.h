/*
 * Generated by gdbus-codegen 2.50.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __OFONO_VOICECALL_INTERFACE_H__
#define __OFONO_VOICECALL_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.ofono.VoiceCall */

#define TYPE_ORG_OFONO_VOICE_CALL (org_ofono_voice_call_get_type ())
#define ORG_OFONO_VOICE_CALL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_OFONO_VOICE_CALL, OrgOfonoVoiceCall))
#define IS_ORG_OFONO_VOICE_CALL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_OFONO_VOICE_CALL))
#define ORG_OFONO_VOICE_CALL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_OFONO_VOICE_CALL, OrgOfonoVoiceCallIface))

struct _OrgOfonoVoiceCall;
typedef struct _OrgOfonoVoiceCall OrgOfonoVoiceCall;
typedef struct _OrgOfonoVoiceCallIface OrgOfonoVoiceCallIface;

struct _OrgOfonoVoiceCallIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_answer) (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_deflect) (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_properties) (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_hangup) (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_property) (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  void (*disconnect_reason) (
    OrgOfonoVoiceCall *object,
    const gchar *arg_unnamed_arg0);

  void (*property_changed) (
    OrgOfonoVoiceCall *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

};

GType org_ofono_voice_call_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_ofono_voice_call_interface_info (void);
guint org_ofono_voice_call_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_ofono_voice_call_complete_get_properties (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void org_ofono_voice_call_complete_set_property (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation);

void org_ofono_voice_call_complete_answer (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation);

void org_ofono_voice_call_complete_hangup (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation);

void org_ofono_voice_call_complete_deflect (
    OrgOfonoVoiceCall *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_ofono_voice_call_emit_property_changed (
    OrgOfonoVoiceCall *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

void org_ofono_voice_call_emit_disconnect_reason (
    OrgOfonoVoiceCall *object,
    const gchar *arg_unnamed_arg0);



/* D-Bus method calls: */
void org_ofono_voice_call_call_get_properties (
    OrgOfonoVoiceCall *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_ofono_voice_call_call_get_properties_finish (
    OrgOfonoVoiceCall *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_ofono_voice_call_call_get_properties_sync (
    OrgOfonoVoiceCall *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_ofono_voice_call_call_set_property (
    OrgOfonoVoiceCall *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_ofono_voice_call_call_set_property_finish (
    OrgOfonoVoiceCall *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_ofono_voice_call_call_set_property_sync (
    OrgOfonoVoiceCall *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_ofono_voice_call_call_answer (
    OrgOfonoVoiceCall *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_ofono_voice_call_call_answer_finish (
    OrgOfonoVoiceCall *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_ofono_voice_call_call_answer_sync (
    OrgOfonoVoiceCall *proxy,
    GCancellable *cancellable,
    GError **error);

void org_ofono_voice_call_call_hangup (
    OrgOfonoVoiceCall *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_ofono_voice_call_call_hangup_finish (
    OrgOfonoVoiceCall *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_ofono_voice_call_call_hangup_sync (
    OrgOfonoVoiceCall *proxy,
    GCancellable *cancellable,
    GError **error);

void org_ofono_voice_call_call_deflect (
    OrgOfonoVoiceCall *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_ofono_voice_call_call_deflect_finish (
    OrgOfonoVoiceCall *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_ofono_voice_call_call_deflect_sync (
    OrgOfonoVoiceCall *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_OFONO_VOICE_CALL_PROXY (org_ofono_voice_call_proxy_get_type ())
#define ORG_OFONO_VOICE_CALL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_OFONO_VOICE_CALL_PROXY, OrgOfonoVoiceCallProxy))
#define ORG_OFONO_VOICE_CALL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_OFONO_VOICE_CALL_PROXY, OrgOfonoVoiceCallProxyClass))
#define ORG_OFONO_VOICE_CALL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_OFONO_VOICE_CALL_PROXY, OrgOfonoVoiceCallProxyClass))
#define IS_ORG_OFONO_VOICE_CALL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_OFONO_VOICE_CALL_PROXY))
#define IS_ORG_OFONO_VOICE_CALL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_OFONO_VOICE_CALL_PROXY))

typedef struct _OrgOfonoVoiceCallProxy OrgOfonoVoiceCallProxy;
typedef struct _OrgOfonoVoiceCallProxyClass OrgOfonoVoiceCallProxyClass;
typedef struct _OrgOfonoVoiceCallProxyPrivate OrgOfonoVoiceCallProxyPrivate;

struct _OrgOfonoVoiceCallProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgOfonoVoiceCallProxyPrivate *priv;
};

struct _OrgOfonoVoiceCallProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_ofono_voice_call_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgOfonoVoiceCallProxy, g_object_unref)
#endif

void org_ofono_voice_call_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgOfonoVoiceCall *org_ofono_voice_call_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgOfonoVoiceCall *org_ofono_voice_call_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_ofono_voice_call_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgOfonoVoiceCall *org_ofono_voice_call_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgOfonoVoiceCall *org_ofono_voice_call_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_OFONO_VOICE_CALL_SKELETON (org_ofono_voice_call_skeleton_get_type ())
#define ORG_OFONO_VOICE_CALL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_OFONO_VOICE_CALL_SKELETON, OrgOfonoVoiceCallSkeleton))
#define ORG_OFONO_VOICE_CALL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_OFONO_VOICE_CALL_SKELETON, OrgOfonoVoiceCallSkeletonClass))
#define ORG_OFONO_VOICE_CALL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_OFONO_VOICE_CALL_SKELETON, OrgOfonoVoiceCallSkeletonClass))
#define IS_ORG_OFONO_VOICE_CALL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_OFONO_VOICE_CALL_SKELETON))
#define IS_ORG_OFONO_VOICE_CALL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_OFONO_VOICE_CALL_SKELETON))

typedef struct _OrgOfonoVoiceCallSkeleton OrgOfonoVoiceCallSkeleton;
typedef struct _OrgOfonoVoiceCallSkeletonClass OrgOfonoVoiceCallSkeletonClass;
typedef struct _OrgOfonoVoiceCallSkeletonPrivate OrgOfonoVoiceCallSkeletonPrivate;

struct _OrgOfonoVoiceCallSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgOfonoVoiceCallSkeletonPrivate *priv;
};

struct _OrgOfonoVoiceCallSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_ofono_voice_call_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgOfonoVoiceCallSkeleton, g_object_unref)
#endif

OrgOfonoVoiceCall *org_ofono_voice_call_skeleton_new (void);


G_END_DECLS

#endif /* __OFONO_VOICECALL_INTERFACE_H__ */
